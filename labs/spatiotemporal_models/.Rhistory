rho_1 ~ dbeta(1, 1)
# the svc
sd.b_2 ~ dgamma(shape = 1, rate = 2)
tau.b_2 <- 1/(sd.b_2*sd.b_2)
rho_2 ~ dbeta(1, 1)
# The random walk
sd.w ~ dgamma(shape = 1, rate = 4)
tau.w <- 1/(sd.w*sd.w)
}
)
initials
initialssvc
t_0 <- Sys.time()
nimble_model <- nimbleModel(
code = model_svc,
data = NIMBLE_data,
constants = NIMBLE_constants,
inits = initialssvc,
name = "model_svc",
calculate = FALSE
)
nimble_model$initializeInfo()
# compile model
Cmodel <- compileNimble(nimble_model)
Cmodel$calculate()
nimble_model$origInits
# configure and build the MCMC
conf <- configureMCMC(nimble_model, monitors = parametersvsc)
MCMC <- buildMCMC(conf)
# compile the MCMC
cMCMC <- compileNimble(MCMC, project = Cmodel)
t_1 <- Sys.time()
t_1 - t_0 # ~ 12 minutes
# MCMC setting
ni <- 50000   # nb iterations
nt <- 25      # thinning interval
nb <- 25000   # nb iterations as burn-in
nc <- 1       # nb chains
# run the MCMC
t_0 <- Sys.time()
mod_svc_res <- runMCMC(cMCMC, niter = ni, nburnin = nb, thin = nt, samples = TRUE, summary = FALSE)
t_1 <- Sys.time()
t_1 - t_0
saveRDS(mod_svc_res, file = "NIMBLE_SVC_B2")
gc()
library(here)
library(tidyverse)
library(nimble)
library(sf)
library(rgeos)
library(patchwork)
library(coda)
library(ggmcmc)
library(spdep)
library(lubridate)
library(fastDummies)
library(INLA)
extrafont::loadfonts()
theme_set(hrbrthemes::theme_ipsum())
knitr::opts_chunk$set(fig.align = 'center')
set.seed(2)
data_england <- read_sf(here("data", "England", "COVIDecoregression.shp"))
glimpse(data_england)
summary(data_england)
class(data_england)
data_england_simpler <- gSimplify(as(data_england, "Spatial"), tol = 500)
data_england_simpler <- st_as_sf(data_england_simpler)
data_england_simpler <- cbind(data_england_simpler, data_england %>% mutate(geometry = NULL))
ggplot() +
geom_sf(data = data_england_simpler, color = "red", fill = "white") +
ggtitle("Map of LTLAs in England") +
coord_sf() +    #axis limits and CRS
labs(x = "Longitude", y = "Latitude", fill = "") +
theme_bw() +    # dark-on-light theme
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14))
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = deaths)) +
ggtitle("COVID-19 deaths") +
theme_bw() + scale_fill_viridis_c(option = "A")|
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = expectd)) +
ggtitle("Expected number of deaths") +
theme_bw() + scale_fill_viridis_c(option = "D")|
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = deaths/expectd)) +
ggtitle("Standardised mortality ratio") +
theme_bw() + scale_fill_viridis_c(option = "B", name = "SMR")
# and the covariates
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = TtlICUB)) +
ggtitle("Total ICU beds") +
theme_bw() + scale_fill_viridis_c(option = "A")|
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = NO2)) +
ggtitle("NO2") +
theme_bw() + scale_fill_viridis_c(option = "D")|
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = IMD)) +
ggtitle("IMD") +
theme_bw() + scale_fill_viridis_c(option = "B")
UnstrCode <- nimbleCode(
{
for (i in 1:N){
O[i] ~ dpois(mu[i])                                # Poisson likelihood for observed counts
log(mu[i]) <- log(E[i]) + alpha + theta[i]
theta[i] ~ dnorm(0, tau = tau.theta) 			         # area-specific RE
RR[i] <- exp(alpha + theta[i])		                 # area-specific RR
}
# Priors:
alpha ~ dnorm(0, tau = 0.00001)                      # vague prior (small precision=large variance)
overallRR <- exp(alpha)                              # overall RR across study region
tau.theta ~ dgamma(1, 0.01)                          # prior for the precision hyperparameter
}
)
# Obtain the number of LTLAs
n.LTLA <- dim(data_england_simpler)[1]
# Format the data for NIMBLE in a list
COVIDdata = list(
O = data_england_simpler$deaths         # observed nb of deaths
)
COVIDConsts <-list(
N = n.LTLA,                              # nb of LTLAs
E = data_england_simpler$expectd         # expected number of deaths
)
# Initialise the unknown parameters, 2 chains
inits <- list(
list(alpha=0.01, tau.theta=10, theta = rep(0.01,times=n.LTLA)),  # chain 1
list(alpha=0.5, tau.theta=1, theta = rep(-0.01,times=n.LTLA)))   # chain 2
# Monitored parameters
params <- c("alpha","theta", "tau.theta", "overallRR", "RR", "mu")
# MCMC setting
ni <- 50000  # nb iterations
nt <- 100    # thinning interval
nb <- 30000  # nb iterations as burn-in
nc <- 2      # nb chains
t_0 <- Sys.time()
modelGS.sim <- nimbleMCMC(code = UnstrCode,
data = COVIDdata,
constants = COVIDConsts,
inits = inits,
monitors = params,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = FALSE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
data_england <- read_sf(here("data", "England", "COVIDecoregression.shp"))
library(here)
library(tidyverse)
library(nimble)
library(sf)
library(rgeos)
library(patchwork)
library(coda)
library(ggmcmc)
library(spdep)
library(lubridate)
library(fastDummies)
library(INLA)
extrafont::loadfonts()
theme_set(hrbrthemes::theme_ipsum())
knitr::opts_chunk$set(fig.align = "center")
set.seed(2)
data_england <- read_sf(here("data", "England", "COVIDecoregression.shp"))
glimpse(data_england)
summary(data_england)
class(data_england)
data_england_simpler <- gSimplify(as(data_england, "Spatial"), tol = 500)
data_england_simpler <- st_as_sf(data_england_simpler)
data_england_simpler <- cbind(data_england_simpler, data_england %>% mutate(geometry = NULL))
ggplot() +
geom_sf(data = data_england_simpler, color = "red", fill = "white") +
ggtitle("Map of LTLAs in England") +
coord_sf() + # axis limits and CRS
labs(x = "Longitude", y = "Latitude", fill = "") +
theme_bw() + # dark-on-light theme
theme(
axis.title = element_text(size = 16),
axis.text = element_text(size = 14)
)
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = deaths)) +
ggtitle("COVID-19 deaths") +
theme_bw() +
scale_fill_viridis_c(option = "A") |
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = expectd)) +
ggtitle("Expected number of deaths") +
theme_bw() +
scale_fill_viridis_c(option = "D") |
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = deaths / expectd)) +
ggtitle("Standardised mortality ratio") +
theme_bw() +
scale_fill_viridis_c(option = "B", name = "SMR")
library(here)
library(tidyverse)
library(nimble)
library(sf)
library(rgeos)
library(patchwork)
library(posterior)
library(bayesplot)
library(spdep)
library(lubridate)
library(fastDummies)
library(INLA)
extrafont::loadfonts()
theme_set(hrbrthemes::theme_ipsum())
knitr::opts_chunk$set(fig.align = "center")
set.seed(2)
data_england <- read_sf(here("data", "England", "COVIDecoregression.shp"))
glimpse(data_england)
summary(data_england)
class(data_england)
data_england_simpler <- gSimplify(as(data_england, "Spatial"), tol = 500)
data_england_simpler <- st_as_sf(data_england_simpler)
data_england_simpler <- cbind(data_england_simpler, data_england %>% mutate(geometry = NULL))
ggplot() +
geom_sf(data = data_england_simpler, color = "red", fill = "white") +
ggtitle("Map of LTLAs in England") +
coord_sf() + # axis limits and CRS
labs(x = "Longitude", y = "Latitude", fill = "") +
theme_bw() + # dark-on-light theme
theme(
axis.title = element_text(size = 16),
axis.text = element_text(size = 14)
)
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = deaths)) +
ggtitle("COVID-19 deaths") +
theme_bw() +
scale_fill_viridis_c(option = "A") |
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = expectd)) +
ggtitle("Expected number of deaths") +
theme_bw() +
scale_fill_viridis_c(option = "D") |
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = deaths / expectd)) +
ggtitle("Standardised mortality ratio") +
theme_bw() +
scale_fill_viridis_c(option = "B", name = "SMR")
# and the covariates
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = TtlICUB)) +
ggtitle("Total ICU beds") +
theme_bw() +
scale_fill_viridis_c(option = "A") |
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = NO2)) +
ggtitle("NO2") +
theme_bw() +
scale_fill_viridis_c(option = "D") |
ggplot() +
geom_sf(data = data_england_simpler, aes(fill = IMD)) +
ggtitle("IMD") +
theme_bw() +
scale_fill_viridis_c(option = "B")
UnstrCode <- nimbleCode({
for (i in 1:N) {
O[i] ~ dpois(mu[i]) # Poisson likelihood for observed counts
log(mu[i]) <- log(E[i]) + alpha + theta[i]
theta[i] ~ dnorm(0, tau = tau.theta) # area-specific RE
RR[i] <- exp(alpha + theta[i]) # area-specific RR
}
# Priors:
alpha ~ dnorm(0, tau = 0.00001) # vague prior (small precision=large variance)
overallRR <- exp(alpha) # overall RR across study region
tau.theta ~ dgamma(1, 0.01) # prior for the precision hyperparameter
})
data_england[startsWith(data_england$LTLA, "E09"),] -> data_england_simpler
ggplot() + geom_sf(data = data_england_simpler, fill = "NA")
data_england_simpler <- gSimplify(as(data_england, "Spatial"), tol = 500)
data_england_simpler <- st_as_sf(data_england_simpler)
data_england_simpler <- cbind(data_england_simpler, data_england %>% mutate(geometry = NULL))
ggplot() +
geom_sf(data = data_england_simpler, color = "red", fill = "white") +
ggtitle("Map of LTLAs in England") +
coord_sf() + # axis limits and CRS
labs(x = "Longitude", y = "Latitude", fill = "") +
theme_bw() + # dark-on-light theme
theme(
axis.title = element_text(size = 16),
axis.text = element_text(size = 14)
)
# Obtain the number of LTLAs
n.LTLA <- dim(data_england_simpler)[1]
# Format the data for NIMBLE in a list
COVIDdata <- list(
O = data_england_simpler$deaths # observed nb of deaths
)
COVIDConsts <- list(
N = n.LTLA, # nb of LTLAs
E = data_england_simpler$expectd # expected number of deaths
)
# Initialise the unknown parameters, 2 chains
inits <- list(
list(alpha = 0.01, tau.theta = 10, theta = rep(0.01, times = n.LTLA)), # chain 1
list(alpha = 0.5, tau.theta = 1, theta = rep(-0.01, times = n.LTLA))
) # chain 2
# Monitored parameters
params <- c("alpha", "theta", "tau.theta", "overallRR", "RR", "mu")
# MCMC setting
ni <- 50000 # nb iterations
nt <- 100 # thinning interval
nb <- 30000 # nb iterations as burn-in
nc <- 2 # nb chains
t_0 <- Sys.time()
modelGS.sim <- nimbleMCMC(
code = UnstrCode,
data = COVIDdata,
constants = COVIDConsts,
inits = inits,
monitors = params,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = FALSE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
t_1 <- Sys.time()
t_1 - t_0 # ~ 2minutes
saveRDS(modelGS.sim, file = "NIMBLE_IDD_A1")
modelGS.sim <- readRDS("NIMBLE_IDD_A1")
head(modelGS.sim$summary$chain1, digits = 3)
head(modelGS.sim$summary$chain2, digits = 3)
head(modelGS.sim$summary$all.chains, digits = 3)
# also
modelGS.sim$summary$chain2[c(1, 2, 3, 7), ]
# or
modelGS.sim$summary$chain2["tau.theta", ]
apply(modelGS.sim$samples$chain1, 2, mean)
apply(modelGS.sim$samples$chain1, 2, sd)
# also
mean(modelGS.sim$samples$chain1[, "tau.theta"])
sd(modelGS.sim$samples$chain1[, "tau.theta"])
modelBYM.sim
mcmc_trace(modelGS.sim$samples, regex_pars = "alpha")
mcmc_trace(modelGS.sim$samples, regex_pars = c("tau.theta")
mcmc_trace(modelGS.sim$samples, regex_pars = c("tau.theta")
mcmc_trace(modelGS.sim$samples, regex_pars = c("tau.theta"))
mcmc_trace(modelGS.sim$samples, regex_pars = c("tau.theta"))
mcmc_hist(posterior, pars = c("tau.theta"))|mcmc_dens(posterior, pars = c("tau.theta"))
mcmc_hist(modelGS.sim$samples, pars = c("tau.theta"))|mcmc_dens(modelGS.sim$samples, pars = c("tau.theta"))
mcmc_dens_overlay(modelGS.sim$samples, pars = c("tau.theta"))
mcmc_hist_overlay(modelGS.sim$samples, pars = c("tau.theta"))
mcmc_hist(modelGS.sim$samples, pars = c("tau.theta"))
mcmc_dens_overlay(modelGS.sim$samples, pars = c("tau.theta"))
mcmc_hist(modelGS.sim$samples$chain1, pars = c("tau.theta"))
mcmc_dens(modelGS.sim$samples$chain1, pars = c("tau.theta"))
mcmc_dens_overlay(modelGS.sim$samples, pars = c("tau.theta"))
mcmc_rhat(modelGS.sim$samples)
rhat(modelGS.sim$samples)
modelGS.sim$samples
rhat(modelGS.sim)
rhat(modelGS.sim$samples)
rhat(modelGS.sim$samples %>% mcmc.list())
mcmc_acf(modelGS.sim$samples)
?mcmc_acf
mcmc_acf(modelGS.sim$samples, regex_pars = c("tau.theta"))
mcmc_acf(modelGS.sim$samples, regex_pars = c("tau.theta"))
mcmc_acf(modelGS.sim$samples, regex_pars = c("tau.theta"))
mcmc_acf_bar(modelGS.sim$samples, pars = c("tau.theta"))
mcmc_rhat(rhat(modelGS.sim$samples))
mcmc_rhat(rhat(modelGS.sim$samples$chain1))
mcmc_rhat(rhat(modelGS.sim$samples))
mcmc_rhat(rhat(modelGS.sim$samples %>% mcmc.list()))
mcmc_rhat(rhat(modelGS.sim$samples %>% as.mcmc.list()))
mcmc_rhat(rhat(modelGS.sim %>% as.mcmc.list()))
modelGS.sim
mcmc_rhat(rhat(modelGS.sim))
class(modelGS.sim)
rhat(class(modelGS.sim))
rhat(modelGS.sim)
class(modelGS.sim)
modelGS.sim %>% as.mcmc.list()
modelGS.sim$summary
mcmc_rhat(rhat(modelGS.sim$summary))
mcmc_rhat(modelGS.sim$samples)
rhat(modelGS.sim$samples)
modelGS.sim$samples %>% class()
modelGS.sim$samples
modelGS.sim$samples %>% as.list()
rhat(list(modelGS.sim$samples$chain1, modelGS.sim$samples$chain2))
?rhats
?rhat
posterior::rhat(modelGS.sim$samples)
bayesplot::rhat(modelGS.sim$samples)
posterior::::rhat(modelGS.sim$samples)
posterior::rhat(modelGS.sim$samples)
modelGS.sim$samples
posterior::rhat(modelGS.sim$samples)
library(coda)
GR.diag <- gelman.diag(modelGS.sim$samples, multivariate = FALSE)
all(GR.diag$psrf[, "Point est."] < 1.1)
# which(GR.diag$psrf[,"Point est."] > 1.1)
RR_COVID <- modelGS.sim$summary$all.chains[paste0("RR[", 1:n.LTLA, "]"), "Median"] # posterior median
data_england_simpler$RR <- RR_COVID
ggplot() + geom_sf(data = data_england_simpler, aes(fill = RR)) + theme_bw() +
scale_fill_viridis_c(limits = c(0,1.6), name = "SMR")
```
ggplot() + geom_sf(data = data_england_simpler, aes(fill = RR)) + theme_bw() +
scale_fill_viridis_c(limits = c(0,1.6), name = "SMR")
ggplot() + geom_sf(data = data_england_simpler, aes(fill = RR)) + theme_bw() +
scale_fill_viridis_c(limits = c(0, 2), name = "SMR")
LTLA_nb <- poly2nb(pl = data_england_simpler)
LTLA_nb
# extract centroids from the England shp
centr <- st_centroid(data_england_simpler) %>% st_geometry()
# and plot the links
par(mar = c(0, 0, 0, 0))
plot(data_england_simpler$geometry, border = "grey66")
plot(LTLA_nb, centr, pch = 19, cex = .5, add = T)
nbWB_A <- nb2WB(nb = LTLA_nb)
names(nbWB_A)
# a list of three components is created:
# adj = ID for all the neighbors; weights = the weight for each neighbour; num: total nb of neighbors across the study region
n.LTLA <- dim(data_england_simpler)[1]
# Format the data for NIMBLE in a list
COVIDdata <- list(
O = data_england_simpler$deaths # observed nb of deaths
)
COVIDConsts <- list(
N = n.LTLA, # nb of LTLAs
# adjacency matrix
L = length(nbWB_A$weights), # the number of neighboring areas
E = data_england_simpler$expectd, # expected number of deaths
adj = nbWB_A$adj, # the elements of the neighbouring matrix
num = nbWB_A$num,
weights = nbWB_A$weights
)
# initialise the unknown parameters, 2 chains
inits <- list(
list(
alpha = 0.01,
tau.theta = 10,
tau.phi = 1,
theta = rep(0.01, times = n.LTLA),
phi = c(rep(0.5, times = n.LTLA))
),
list(
alpha = 0.5,
tau.theta = 1,
tau.phi = 0.1,
theta = rep(0.05, times = n.LTLA),
phi = c(rep(-0.05, times = n.LTLA))
)
)
params <- c("sigma2.theta", "sigma2.phi", "overallRR", "theta", "SMR", "resRR", "proba.resRR", "alpha")
ni <- 50000 # nb iterations
nt <- 10 # thinning interval
nb <- 10000 # nb iterations as burning
nc <- 2 # nb chains
modelBYM.sim <- readRDS("NIMBLE_BYM_A3")
modelBYM.sim$WAIC
mcmc_trace(modelBYM.sim$samples, regex_pars = c("resRR[1]", "resRR[19]", "resRR[41]", "resRR[72]"))
mcmc_trace(modelBYM.sim$samples, complete_pars = c("resRR[1]", "resRR[19]", "resRR[41]", "resRR[72]"))
mcmc_trace(modelBYM.sim$samples, regex_pars = c("RR[1]", "RR[19]", "RR[41]", "RR[72]"))
mcmc_trace(modelBYM.sim$samples, regex_pars = c("resRR[1]""))
modelBYM.sim$samples
mcmc_trace(modelBYM.sim$samples, regex_pars = c("resRR[1]"))
mcmc_trace(modelBYM.sim$samples, regex_pars = c("resRR"))
?mcmc_trace
mcmc_trace(modelBYM.sim$samples, pars  = c("resRR[1]"))
mcmc_trace(modelBYM.sim$samples, pars = c("resRR[1]", "resRR[19]", "resRR[41]", "resRR[72]"))
mcmc_trace(modelBYM.sim$samples, pars = c("resRR[1]", "resRR[19]", "resRR[41]", "resRR[72]"))
mcmc_trace(modelGS.sim$samples, pars = c("tau.theta"))
mcmc_trace(modelBYM.sim$samples, pars = c("resRR[1]", "resRR[19]", "resRR[41]", "resRR[72]"))
RR_BYM <- data.frame(
RR_BYM = modelBYM.sim$summary$all.chains[paste0("resRR[", 1:n.LTLA, "]"), "Median"],
pp_BYM = modelBYM.sim$summary$all.chains[paste0("proba.resRR[", 1:n.LTLA, "]"), "Mean"]
)
RR_BYM$LTLA <- data_england$LTLA
colnames(RR_BYM) <- c("BYM", "pp_resRR", "LTLA")
COVID19Deaths <- left_join(data_england_simpler, RR_BYM, by = c("LTLA" = "LTLA"))
ggplot() +
geom_sf(data = COVID19Deaths, aes(fill = BYM)) + # standard map
scale_fill_viridis_c(name = "RR", limits = c(0, 2)) +
ggtitle("Posterior median RR") +
theme(
axis.title.x = element_blank(), # removes xaxis title
axis.title.y = element_blank() # removes yaxis title
) |
ggplot() +
geom_sf(data = COVID19Deaths, aes(fill = pp_resRR)) +
scale_fill_viridis_c(name = "Prob") +
ggtitle("Exceedance probability") +
theme(
axis.title.x = element_blank(), # removes xaxis title
axis.title.y = element_blank() # removes yaxis title
)
mcmc_trace(modelBYM.sim$samples, pars = c("alpha", "beta1", "beta2"))
modelBYMeco.sim <- readRDS("NIMBLE_BYM_A4")
mcmc_trace(modelBYMeco.sim$samples, pars = c("alpha", "beta1", "beta2"))
modelBYMeco.sim$WAIC
mcmc_trace(modelBYMeco.sim$samples, pars = c("alpha", "beta1", "beta2"))
mcmc_trace(modelBYMeco.sim$samples, pars = c("alpha", "beta1", "beta2"))
mcmc_trace(modelBYMeco.sim$samples, pars = c("alpha", "beta1", "beta2"))
mcmc_trace(modelBYMeco.sim$samples, pars = c("alpha", "beta1", "beta2"))
mcmc_trace(modelBYMeco.sim$samples, pars = c("alpha", "beta1", "beta2"))
mcmc_trace(modelBYMeco.sim$samples, pars = c("alpha", "beta1", "beta2"))
